# MediaPipe graph that performs template matching with TensorFlow Lite on CPU.
# Used in the examples in
# mediapipe/examples/android/src/java/com/mediapipe/apps/templatematchingcpu

# Images on GPU coming into and out of the graph.
input_stream: "input_video"
output_stream: "FEATURES:features"
output_stream: "FLOATS:feature_floats"

# Transfers the input image from GPU to CPU memory.
node: {
  calculator: "GpuBufferToImageFrameCalculator"
  input_stream: "input_video"
  output_stream: "input_video_cpu"
}

# Scale the image's longer side to 640, keeping aspect ratio.
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:input_video_cpu"
  output_stream: "IMAGE:transformed_input_video_cpu"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 640
      output_height: 640
      scale_mode: FILL_AND_CROP
    }
  }
}

node {
  calculator: "FeatureDetection"
  input_stream: "IMAGE:transformed_input_video_cpu"
  output_stream: "FEATURES:features"
}


# Throttles the images flowing downstream for flow control.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "IMAGE:transformed_input_video_cpu"
  input_stream: "TENSORS:feature_tensors"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "IMAGE:throttled_input_video_cpu"
}

node: {
  calculator: "ImageToTensorCalculator"
  input_stream: "IMAGE:throttled_input_video_cpu"
  output_stream: "TENSORS:tensors"
  node_options: {
    [type.googleapis.com/mediapipe.ImageToTensorCalculatorOptions] {
        keep_aspect_ratio: true
        border_mode: BORDER_ZERO
    }
  }
  option_value: "output_tensor_width:options/tensor_width"
  option_value: "output_tensor_height:options/tensor_height"
}
# input tensors: 200*32*32*1 float
# output tensors: 200*40 float, only first keypoint.size()*40 is knift features,
# rest is padded by zero.
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS:tensors"
  output_stream: "TENSORS:feature_tensors"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      model_path: "mediapipe/models/knift_float.tflite"
      delegate { xnnpack {} }
    }
  }
}

node {
  calculator: "TfLiteTensorsToFloatsCalculator"
  input_stream: "TENSORS:feature_tensors"
  output_stream: "FLOATS:feature_floats"
}