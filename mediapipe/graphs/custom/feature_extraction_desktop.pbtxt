output_stream: "bytes"
max_queue_size: 5

profiler_config {
  trace_enabled: true
  enable_profiler: true
  trace_log_interval_count: 200
  trace_log_path: "./trace"
}

node {
  calculator: "OpenCvVideoDecoderCalculator"
  input_side_packet: "INPUT_FILE_PATH:input_video_path"
  output_stream: "VIDEO:input_video_cpu"
}


node {
  calculator: "PictureLocalizationCalculator"
  input_stream: "IMAGE:input_video_cpu"
  output_stream: "IMAGE:cropped_image"
} 

node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:cropped_image"
  output_stream: "IMAGE:transformed_input_video_cpu"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 224
      output_height: 224
      scale_mode: FIT
    }
  }
}

node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE:transformed_input_video_cpu"
  output_stream: "TENSORS:cropped_image_tensor"
  options: {
    [mediapipe.TfLiteConverterCalculatorOptions.ext] {
      zero_center: false
    }
  }
}


node {
  calculator: "FlowLimiterCalculator"
  input_stream: "cropped_image_tensor"
  input_stream: "FINISHED:bytes"
  input_stream_info: {
    tag_index: 'FINISHED'
    back_edge: true
  }
  options : {
    [mediapipe.FlowLimiterCalculatorOptions.ext] {
      max_in_flight: 1
    }
  }
  output_stream: "throttled_image_tensor"
}

node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS:throttled_image_tensor"
  output_stream: "TENSORS:tensors"
  options: {
    [mediapipe.TfLiteInferenceCalculatorOptions.ext] {
      model_path: "/mediapipe/mediapipe/graphs/custom/model.tflite"
      delegate { xnnpack {} }
    }
  }
}

node {
  calculator: "TfLiteTensorsToFloatsCalculator"
  input_stream: "TENSORS:tensors"
  output_stream: "FLOATS:bytes"
}
num_threads: 2